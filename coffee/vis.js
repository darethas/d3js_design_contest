// Generated by CoffeeScript 1.6.3
(function() {
  var BubbleChart, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BubbleChart = (function() {
    function BubbleChart(data) {
      this.hide_details = __bind(this.hide_details, this);
      this.show_details = __bind(this.show_details, this);
      this.hide_manufacturers = __bind(this.hide_manufacturers, this);
      this.display_manufacturers = __bind(this.display_manufacturers, this);
      this.move_towards_manufacturer = __bind(this.move_towards_manufacturer, this);
      this.display_by_manufacturer = __bind(this.display_by_manufacturer, this);
      this.move_towards_center = __bind(this.move_towards_center, this);
      this.display_group_all = __bind(this.display_group_all, this);
      this.start = __bind(this.start, this);
      this.create_vis = __bind(this.create_vis, this);
      this.create_nodes = __bind(this.create_nodes, this);
      var max_amount;
      this.data = data;
      this.width = 940;
      this.height = 600;
      this.colSpace = 940 / 7;
      this.txtSpace = 940 / 7 * 2;
      this.tooltip = CustomTooltip("cereal_tooltip", 240);
      this.center = {
        x: this.width / 2,
        y: this.height / 2
      };
      this.manufacturer_centers = {
        "A": {
          x: this.width / 2 - this.colSpace * 1.5,
          y: this.height / 2
        },
        "G": {
          x: this.width / 2 - this.colSpace * 1,
          y: this.height / 2
        },
        "N": {
          x: this.width / 2 - this.colSpace * 0.5,
          y: this.height / 2
        },
        "P": {
          x: this.width / 2,
          y: this.height / 2
        },
        "K": {
          x: this.width / 2 + this.colSpace * 0.5,
          y: this.height / 2
        },
        "Q": {
          x: this.width / 2 + this.colSpace * 1,
          y: this.height / 2
        },
        "R": {
          x: this.width / 2 + this.colSpace * 1.5,
          y: this.height / 2
        }
      };
      this.layout_gravity = -0.01;
      this.damper = 0.1;
      this.vis = null;
      this.nodes = [];
      this.force = null;
      this.circles = null;
      this.fill_color = d3.scale.ordinal().domain(["A", "G", "N", "P", "K", "Q", "R"]).range(colorbrewer.Greens[6]);
      max_amount = d3.max(this.data, function(d) {
        return parseInt(d.Calories);
      });
      this.radius_scale = d3.scale.pow().exponent(3.5).domain([0, max_amount]).range([2, 85]);
      this.fill_color_calories = d3.scale.linear().domain([0, max_amount]).range(colorbrewer.Reds[9]);
      this.create_nodes();
      this.create_vis();
    }

    BubbleChart.prototype.create_nodes = function() {
      var _this = this;
      this.data.forEach(function(d) {
        var node;
        node = {
          id: d.id,
          radius: _this.radius_scale(parseInt(d.Calories)),
          value: d.Calories,
          name: d.Cereal,
          manufacturer: d.Manufacturer,
          type: d.Type,
          protein: d.Protein,
          fat: d.Fat,
          sodium: d.Sodium,
          fiber: d.Fiber,
          carbs: d.Carbohydrates,
          sugars: d.Sugars,
          shelf: d.Shelf,
          potassium: d.Potassium,
          vitamins: d.Vitamins,
          weight: d.Weight,
          cups: d.Cups,
          x: Math.random() * 900,
          y: Math.random() * 800
        };
        return _this.nodes.push(node);
      });
      return this.nodes.sort(function(a, b) {
        return b.value - a.value;
      });
    };

    BubbleChart.prototype.create_vis = function() {
      var that,
        _this = this;
      this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
      this.circles = this.vis.selectAll("circle").data(this.nodes, function(d) {
        return d.id;
      });
      that = this;
      this.circles.enter().append("circle").attr("r", 0).attr("fill", function(d) {
        return _this.fill_color(d.manufacturer);
      }).attr("stroke-width", 2).attr("stroke", function(d) {
        return d3.rgb(_this.fill_color(d.manufacturer)).darker();
      }).attr("id", function(d) {
        return "bubble_" + d.id;
      }).on("mouseover", function(d, i) {
        return that.show_details(d, i, this);
      }).on("mouseout", function(d, i) {
        return that.hide_details(d, i, this);
      });
      return this.circles.transition().duration(2000).attr("r", function(d) {
        return d.radius;
      });
    };

    BubbleChart.prototype.charge = function(d) {
      return -Math.pow(d.radius, 2.0) / 8;
    };

    BubbleChart.prototype.start = function() {
      return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]);
    };

    BubbleChart.prototype.display_group_all = function() {
      var _this = this;
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
        return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      });
      this.force.start();
      return this.hide_manufacturers();
    };

    BubbleChart.prototype.move_towards_center = function(alpha) {
      var _this = this;
      return function(d) {
        d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;
        return d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
      };
    };

    BubbleChart.prototype.display_by_manufacturer = function() {
      var _this = this;
      this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", function(e) {
        return _this.circles.each(_this.move_towards_manufacturer(e.alpha)).attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      });
      this.force.start();
      return this.display_manufacturers();
    };

    BubbleChart.prototype.move_towards_manufacturer = function(alpha) {
      var _this = this;
      return function(d) {
        var target;
        target = _this.manufacturer_centers[d.manufacturer];
        d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
        return d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
      };
    };

    BubbleChart.prototype.display_manufacturers = function() {
      var manufacturers, manufacturers_data, manufacturers_x,
        _this = this;
      manufacturers_x = {
        "A": this.width / 2 - this.txtSpace * 1.5,
        "G": this.width / 2 - this.txtSpace * 1,
        "N": this.width / 2 - this.txtSpace * 0.5,
        "P": this.width / 2,
        "K": this.width / 2 + this.txtSpace * 0.5,
        "Q": this.width / 2 + this.txtSpace * 1,
        "R": this.width / 2 + this.txtSpace * 1.5
      };
      manufacturers_data = d3.keys(manufacturers_x);
      manufacturers = this.vis.selectAll(".manufacturers").data(manufacturers_data);
      return manufacturers.enter().append("text").attr("class", "manufacturers").attr("x", function(d) {
        return manufacturers_x[d];
      }).attr("y", 40).attr("text-anchor", "middle").text(function(d) {
        return d;
      });
    };

    BubbleChart.prototype.hide_manufacturers = function() {
      var manufacturers;
      return manufacturers = this.vis.selectAll(".manufacturers").remove();
    };

    BubbleChart.prototype.show_details = function(data, i, element) {
      var content;
      d3.select(element).attr("stroke", "black");
      content = "<span class=\"name\">Cereal:</span><span class=\"value\"> " + data.name + "</span><br/>";
      content += "<span class=\"name\">Calories:</span><span class=\"value\"> " + (addCommas(data.value)) + "</span><br/>";
      content += "<span class=\"name\">Manufacturer:</span><span class=\"value\"> " + data.manufacturer + "</span><br/>";
      content += "<span class=\"name\">Type:</span><span class=\"value\"> " + data.type + "</span><br/>";
      content += "<span class=\"name\">Protein:</span><span class=\"value\"> " + data.protein + "</span><br/>";
      content += "<span class=\"name\">Fat:</span><span class=\"value\"> " + data.fat + "</span><br/>";
      content += "<span class=\"name\">Sodium:</span><span class=\"value\"> " + data.sodium + "</span><br/>";
      content += "<span class=\"name\">Fiber:</span><span class=\"value\"> " + data.fiber + "</span><br/>";
      content += "<span class=\"name\">Carbohydrates:</span><span class=\"value\"> " + data.carbs + "</span><br/>";
      content += "<span class=\"name\">Sugars:</span><span class=\"value\"> " + data.sugars + "</span><br/>";
      content += "<span class=\"name\">Shelf:</span><span class=\"value\"> " + data.shelf + "</span><br/>";
      content += "<span class=\"name\">Potassium:</span><span class=\"value\"> " + data.potassium + "</span><br/>";
      content += "<span class=\"name\">Vitamins:</span><span class=\"value\"> " + data.vitamins + "</span><br/>";
      content += "<span class=\"name\">Weight:</span><span class=\"value\"> " + data.weight + "</span><br/>";
      content += "<span class=\"name\">Cups:</span><span class=\"value\"> " + data.cups + "</span>";
      return this.tooltip.showTooltip(content, d3.event);
    };

    BubbleChart.prototype.hide_details = function(data, i, element) {
      var _this = this;
      d3.select(element).attr("stroke", function(d) {
        return d3.rgb(_this.fill_color(d.manufacturer)).darker();
      });
      return this.tooltip.hideTooltip();
    };

    return BubbleChart;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $(function() {
    var chart, render_vis,
      _this = this;
    chart = null;
    render_vis = function(csv) {
      chart = new BubbleChart(csv);
      chart.start();
      return root.display_all();
    };
    root.display_all = function() {
      return chart.display_group_all();
    };
    root.display_manufacturers = function() {
      return chart.display_by_manufacturer();
    };
    root.toggle_view = function(view_type) {
      if (view_type === 'manufacturer') {
        return root.display_manufacturers();
      } else {
        return root.display_all();
      }
    };
    return d3.csv("data/a1-cereals.csv", render_vis);
  });

}).call(this);

/*
//@ sourceMappingURL=vis.map
*/
